
필터를 써서 분류 가능
  val totalStudentsArrived = studentComeTime.filter { it <= 0 }.count()
맵을 아래처럼 써서 모든 인자를 바로 인트로 바꿀수있다.
  val studentComeTime = scanner.nextLine().split(" ").map(String::toInt).toTypedArray()

코드 예제
https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/

//listOf 예제, group by
    val evenList   = listOf(0,"a",1,"b",2,"c")
    val unevenList = listOf(0,"a",1,"b",2,"c",3)
    val numberList   = listOf(1,2,3,4,5,6)
    val result1 = numberList.groupBy { (it + 1) / 2 }
    val result2 = numberList.groupBy { (it + 1) / 2 }.values //key value에서 value값만 추출
    val numberList2   = listOf(1,2,3,4,5,6,7)
    val result3 = numberList2.groupBy { (it + 1) / 2 }
    val result4 = numberList2.groupBy { (it + 1) / 2 }.values
    val result5 = unevenList.windowed(2,2,true) //사이즈 2로 2칸씩 띄어서 윈도우 씌워서 값들을 뽑아냄, 파셜 윈도우 옵션이 커져있으면 윈도우 크기가 안맞는 끄트머리도 포함
    val result6 = unevenList.windowed(2,2,false) //partialWindows를 꺼놨으므로 uneven의 끄트머리를 버린다.
    val result7 = unevenList.windowed(3,2,true)
    val result8 = unevenList.windowed(3,2,false)
    val result9  = evenList.chunked(3)
    val result10 = evenList.chunked(4)


//1>>>> Array 배열 생성법
//1. val array : Array<Int> = arrayOf(1,2,3)
//2. val array2 = arrayOfNulls<Int>(3) // null,null,null 생성
//3. val array3 = / 람다식을 사용하여 생성방법
//4. val array : IntArray = intArrayOf(1,2,3) : 이것의 타입은 inArray이다. arrayOf(1,2,3)로 생성하는 Array<Int>와는 다른 속성이므로 유의할 것
//5. val arr = IntArray(5)
//6. val nulls = arrayOfNulls<String>(size) //equivalent in Java: new String[size]
//7. val strings = Array(size) { "n = $it" }
//8. val myStrings = arrayOf("foo", "bar", "baz")
//9. val boxedInts = arrayOfNulls<Int>(size) //equivalent in Java: new Integer[size]
//10. val boxedZeros = Array(size) { 0 }  <= 모두 0으로 초기화
//11.  var matchingA = mutableListOf<Int>() <=  뮤타블은 add를 사용할수 있음
//  private val days = arrayOf("Mo", "Tu", "Wed", "Th", "Fr", "Sa", "Su")
//  for (i in 0..position - 1)

//2>>>>withIndex 예제 => for문에 인덱싱을 동시에 하도록하는 withIndex 예제
//    val iterator = ('a'..'c').iterator()
//    for ((index, value) in iterator.withIndex()) {
//        println("The element at $index is $value")
//    }

val types = Array<Long>(size, {0L})
val containers = Array<Long>(size, {0L})

//3>>> Map/Set 예제

Set :
리스트와 달리 중복을 허용하지 않는다. 순차적이지 않은 집합. setOf() 함수에 의해 생성가능
MutableSet, HashSet, LinkedHashSet, TreeSet 이 있음

Map :
mapOf() 함수로 생성 가능,
ex : val map1 : Map<String, Int> = mapOf("one" to 1, "two" to 2)
val map2 : Map<String, Int> = mapOf(Pair("one",1), Pair("two", 2))
map2.put/set("two", 20)
map2.remove("two")
put/set/remove로 조정

HashMap
내부적으로 Entry<K,V>[] Entry 의 array 로 되어 있다. 해당 array 에 index 는 내부 해쉬 함수를 통해 계산된다.

TreeMap
내부적으로 RedBlack Tree로 저장됨, 키값에 대한 Compartor 구현으로 정렬 순서를 바꿀수 있다.
LinkedHashMap

링크드 리스트로 저장됨
키값은 입력 순서대로 출력되어서 나온다.

특별한 이유가 없다면 검색 성능이 좋은(O(1)) HashMap 을 사용하자
키값이 일정한 수준대로 iterate 하려고 한다면 TreeMap 을 사용하자. 하지만 랜덤 접근에 대해서는 O(logn) 성능을 지니므로 많은 데이터를 넣을경우 좋지 않은 성능이 나올수 있다.
입력 순서가 의미있다면 LinkedHashMap 을 사용하자. 랜덤 접근에 대해 O(n) 성능을 지니므로 많은 데이터를 입력할 경우 사용하지 않는것이 좋겠다.



    val array_for_return_selected = Array<Int>(queries.size) { 0 }
    for(string in strings)
    {
        for ((index, query) in queries.withIndex())
        {
            if(string == query)
            {
                array_for_return_selected[index]++
            }
        }
    }


//val array_for_return2 = intArrayOf(0,0,0,...)

//    val arr = IntArray(5)
//    var array_for_return = arrayOf<Int>()
//    val array_for_return1 = Array(15) { 0 }

for문 예시
for(index in 0..matchingB.size)
{

}

for(index in 0..matchingB.size)
{
matchingB.set(matchingB[index].first, false)
}


----------------------------------subList----------------------------------------------------
List 끊거나 취하는 예제
List<E> subList(int fromIndex, int toIndex)
List<String> list = new ArrayList<String>();
  list.add("한진"); 1
  list.add("두진"); 2
  list.add("세진"); 3
  list.add("네진"); 4
  list.add("다섯진"); 5
  list.add("여섯진"); 6
  list.add("일곱진"); 7
  System.out.println(list.subList(3, list.size()));
[네진, 다섯진, 여섯진, 일곱진]
 System.out.print(list.subList(1, 5));
[두진, 세진, 네진, 다섯진]
----------------------------------Slice----------------------------------------------------
val nums = arrayOf(1,2,3,4,5)
println(nums.get(0))
nums.set(0,0)
println(Arrays.toString(nums))

val nums2 = nums.plus(1)
println(Arrays.toString(nums2))

val slice = nums.sliceArray(1..3)
println(Arrays.toString(slice))

println(nums.first())
println(nums.last())
println(nums.indexOf(5))

------------------------------------------------String 처리 관련-----------------------------------------------
------------------------------------------------String builder-----------------------------------------------
1. String은 immutable하다. 따라서 이를 배열과 같이 사용하여 바꿀수는 없다. 이를 해결하기위해서는 https://www.baeldung.com/java-replace-character-at-index 참고
val StringX = "abcde"가 있으면 Stringy = String.toCharArray() 바꾸어 주어서 staringy[5] ='3' 이런식으로 사용하면된다.
  var stringgrid = calculatedGrid[yindex].toCharArray()
2. 이를 다시 String으로 합치려면   calculatedGrid[yindex] = stringgrid.joinToString("") 와 같이 ""를 기점으로 char를 string으로 add하는 명령어로 string을 만들어줄수 있다.
gt

public String com.example.invitation_codingtest.hangnim_package.replaceCharUsingCharArray(String str, char ch, int index) {
    char[] chars = str.toCharArray();
    chars[index] = ch;
    return String.valueOf(chars);
}

public String replaceChar(String str, char ch, int index) {
    return str.substring(0, index) + ch + str.substring(index+1);
}

public String replaceChar(String str, char ch, int index) {
    StringBuilder myString = new StringBuilder(str);
    myString.setCharAt(index, ch);
    return myString.toString();
}


val a = "Hello"
val b = "World"
val sb = StringBuilder()
sb.append(a).append(b)
val c = sb.toString()
print(c)


